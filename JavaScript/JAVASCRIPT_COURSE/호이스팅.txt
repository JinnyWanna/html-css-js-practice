호이스팅: JS는 코드 실행전, 코드 실행을 위한 환경을 만들기 위하여 실행 컨텍스트 과정을 거친다. 그 과정 속에서 모든 선언들(const, let, function, class 등)을 먼저 메모리(Variable Environment)에 등록한다.

실행 컨텍스트 : 실행할 코드에 제공할 정보들을 모아놓은 객체

(선언을 코드 실행보다 먼저 메모리에 올린다.)

모든 선언, 변수에는 호이스팅이 발생함.


var 키워드는 선언시 undefined로 초기화해 메모리에 저장된다.
const, let은 초기화 되지 않고 선언만 메모리에 저장된다. : 미리 선언은 등록되어 있으나, 값을 지정해 주기 전까진 빈 상태로 존재한다.

함수는 선언식, 표현식으로 정의가 가능하다.

선언식으로 정의하는 경우, 함수 선언에 초기화, value 지정 까지 같이 진행되므로 Lexical Environment에 함수 내용까지 들어가게 된다.

표현식으로 정의하는 경우, 위 변수파트에서 말했듯이, var인 경우 변수명과 undefined로 초기화된 값만 먼저 Lexical에 올라가고,
const, let인 경우 변수명만 먼저 Lexical에 올라가므로, 함수를 선언전에 이용시 문제가 발생한다.


Lexical Environment 설명 

자바스크립트는 실행시 전역, 함수 범위 context 내에서 VariableEnvironment을 생성한다. 그리고 VariableEnvironment안에 선언들을 등록하게 된다. 이를 호이스팅이라 한다.

이를 복사해서 Lexical Environment라는 것을 만들게 되는데, 이 곳에 호이스팅된 정보의 변화를 저장한다. VariableEnvironment는 단순 LexicalEnvironment의 초기 스냅샷이며, 더 이상 변화하지 않는다.
->( 실행 컨텍스트(Execution Context) 과정 설명 )->


-------------------------------------------------------
js코드의 실행과정

